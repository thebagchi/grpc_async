// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sim_rpc.proto

#include "sim_rpc.pb.h"
#include "sim_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sim_rpc {

static const char* SampleSvc_method_names[] = {
  "/sim_rpc.SampleSvc/RPC_1",
  "/sim_rpc.SampleSvc/RPC_2",
};

std::unique_ptr< SampleSvc::Stub> SampleSvc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SampleSvc::Stub> stub(new SampleSvc::Stub(channel, options));
  return stub;
}

SampleSvc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RPC_1_(SampleSvc_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RPC_2_(SampleSvc_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SampleSvc::Stub::RPC_1(::grpc::ClientContext* context, const ::sim_rpc::RPC1Request& request, ::sim_rpc::RPC1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sim_rpc::RPC1Request, ::sim_rpc::RPC1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RPC_1_, context, request, response);
}

void SampleSvc::Stub::async::RPC_1(::grpc::ClientContext* context, const ::sim_rpc::RPC1Request* request, ::sim_rpc::RPC1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sim_rpc::RPC1Request, ::sim_rpc::RPC1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RPC_1_, context, request, response, std::move(f));
}

void SampleSvc::Stub::async::RPC_1(::grpc::ClientContext* context, const ::sim_rpc::RPC1Request* request, ::sim_rpc::RPC1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RPC_1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sim_rpc::RPC1Response>* SampleSvc::Stub::PrepareAsyncRPC_1Raw(::grpc::ClientContext* context, const ::sim_rpc::RPC1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sim_rpc::RPC1Response, ::sim_rpc::RPC1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RPC_1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sim_rpc::RPC1Response>* SampleSvc::Stub::AsyncRPC_1Raw(::grpc::ClientContext* context, const ::sim_rpc::RPC1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRPC_1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SampleSvc::Stub::RPC_2(::grpc::ClientContext* context, const ::sim_rpc::RPC2Request& request, ::sim_rpc::RPC2Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sim_rpc::RPC2Request, ::sim_rpc::RPC2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RPC_2_, context, request, response);
}

void SampleSvc::Stub::async::RPC_2(::grpc::ClientContext* context, const ::sim_rpc::RPC2Request* request, ::sim_rpc::RPC2Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sim_rpc::RPC2Request, ::sim_rpc::RPC2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RPC_2_, context, request, response, std::move(f));
}

void SampleSvc::Stub::async::RPC_2(::grpc::ClientContext* context, const ::sim_rpc::RPC2Request* request, ::sim_rpc::RPC2Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RPC_2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sim_rpc::RPC2Response>* SampleSvc::Stub::PrepareAsyncRPC_2Raw(::grpc::ClientContext* context, const ::sim_rpc::RPC2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sim_rpc::RPC2Response, ::sim_rpc::RPC2Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RPC_2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sim_rpc::RPC2Response>* SampleSvc::Stub::AsyncRPC_2Raw(::grpc::ClientContext* context, const ::sim_rpc::RPC2Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRPC_2Raw(context, request, cq);
  result->StartCall();
  return result;
}

SampleSvc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SampleSvc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SampleSvc::Service, ::sim_rpc::RPC1Request, ::sim_rpc::RPC1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SampleSvc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sim_rpc::RPC1Request* req,
             ::sim_rpc::RPC1Response* resp) {
               return service->RPC_1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SampleSvc_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SampleSvc::Service, ::sim_rpc::RPC2Request, ::sim_rpc::RPC2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SampleSvc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sim_rpc::RPC2Request* req,
             ::sim_rpc::RPC2Response* resp) {
               return service->RPC_2(ctx, req, resp);
             }, this)));
}

SampleSvc::Service::~Service() {
}

::grpc::Status SampleSvc::Service::RPC_1(::grpc::ServerContext* context, const ::sim_rpc::RPC1Request* request, ::sim_rpc::RPC1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SampleSvc::Service::RPC_2(::grpc::ServerContext* context, const ::sim_rpc::RPC2Request* request, ::sim_rpc::RPC2Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* AnotherSampleSvc_method_names[] = {
  "/sim_rpc.AnotherSampleSvc/RPC_1",
  "/sim_rpc.AnotherSampleSvc/RPC_2",
};

std::unique_ptr< AnotherSampleSvc::Stub> AnotherSampleSvc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AnotherSampleSvc::Stub> stub(new AnotherSampleSvc::Stub(channel, options));
  return stub;
}

AnotherSampleSvc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RPC_1_(AnotherSampleSvc_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RPC_2_(AnotherSampleSvc_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AnotherSampleSvc::Stub::RPC_1(::grpc::ClientContext* context, const ::sim_rpc::RPC1Request& request, ::sim_rpc::RPC1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sim_rpc::RPC1Request, ::sim_rpc::RPC1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RPC_1_, context, request, response);
}

void AnotherSampleSvc::Stub::async::RPC_1(::grpc::ClientContext* context, const ::sim_rpc::RPC1Request* request, ::sim_rpc::RPC1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sim_rpc::RPC1Request, ::sim_rpc::RPC1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RPC_1_, context, request, response, std::move(f));
}

void AnotherSampleSvc::Stub::async::RPC_1(::grpc::ClientContext* context, const ::sim_rpc::RPC1Request* request, ::sim_rpc::RPC1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RPC_1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sim_rpc::RPC1Response>* AnotherSampleSvc::Stub::PrepareAsyncRPC_1Raw(::grpc::ClientContext* context, const ::sim_rpc::RPC1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sim_rpc::RPC1Response, ::sim_rpc::RPC1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RPC_1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sim_rpc::RPC1Response>* AnotherSampleSvc::Stub::AsyncRPC_1Raw(::grpc::ClientContext* context, const ::sim_rpc::RPC1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRPC_1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AnotherSampleSvc::Stub::RPC_2(::grpc::ClientContext* context, const ::sim_rpc::RPC2Request& request, ::sim_rpc::RPC2Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sim_rpc::RPC2Request, ::sim_rpc::RPC2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RPC_2_, context, request, response);
}

void AnotherSampleSvc::Stub::async::RPC_2(::grpc::ClientContext* context, const ::sim_rpc::RPC2Request* request, ::sim_rpc::RPC2Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sim_rpc::RPC2Request, ::sim_rpc::RPC2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RPC_2_, context, request, response, std::move(f));
}

void AnotherSampleSvc::Stub::async::RPC_2(::grpc::ClientContext* context, const ::sim_rpc::RPC2Request* request, ::sim_rpc::RPC2Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RPC_2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sim_rpc::RPC2Response>* AnotherSampleSvc::Stub::PrepareAsyncRPC_2Raw(::grpc::ClientContext* context, const ::sim_rpc::RPC2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sim_rpc::RPC2Response, ::sim_rpc::RPC2Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RPC_2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sim_rpc::RPC2Response>* AnotherSampleSvc::Stub::AsyncRPC_2Raw(::grpc::ClientContext* context, const ::sim_rpc::RPC2Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRPC_2Raw(context, request, cq);
  result->StartCall();
  return result;
}

AnotherSampleSvc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnotherSampleSvc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnotherSampleSvc::Service, ::sim_rpc::RPC1Request, ::sim_rpc::RPC1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnotherSampleSvc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sim_rpc::RPC1Request* req,
             ::sim_rpc::RPC1Response* resp) {
               return service->RPC_1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnotherSampleSvc_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnotherSampleSvc::Service, ::sim_rpc::RPC2Request, ::sim_rpc::RPC2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnotherSampleSvc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sim_rpc::RPC2Request* req,
             ::sim_rpc::RPC2Response* resp) {
               return service->RPC_2(ctx, req, resp);
             }, this)));
}

AnotherSampleSvc::Service::~Service() {
}

::grpc::Status AnotherSampleSvc::Service::RPC_1(::grpc::ServerContext* context, const ::sim_rpc::RPC1Request* request, ::sim_rpc::RPC1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnotherSampleSvc::Service::RPC_2(::grpc::ServerContext* context, const ::sim_rpc::RPC2Request* request, ::sim_rpc::RPC2Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sim_rpc

